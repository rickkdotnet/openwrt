# RK /etc/rc.local
# 
# v20230312a 

# SAFE MODE to catch bootloops
# 
# I have script in /etc/init.d/crash-counter which writes a file on boot and deletes it on 
# a clean shutdown. If the file is present, it means the system wasn't shutdown cleanly. 
# If this happens a lot, don't execute the rest of this script
#
if [ -f /etc/crash-counter ]; then
  CRASHES=`cat /etc/crash-counter`
  if [ $CRASHES -gt 3 ]; then
    echo "ERROR: System has crashed more than 2 times, not executing rc.local, hope this helps.. " 

    # the nssifb driver can be a bit temperamental too, disable the service so it doesn't get loaded
    echo "ERROR: Disabling SQM" 
    service sqm disable

    exit 1
  else 
    echo "WARNING: crash counter is present, crash count is $CRASHES"
  fi
fi

# RC.ONCE
#
# This file is ran once on every new build, ensuring some configurations are in place
if [ ! -f "/etc/rc.once.ran" ] && [ -f "/etc/rc.once" ]; then
  echo "Running rc.once, for once." 
  sh /etc/rc.once
  touch /etc/rc.once.ran  
fi 


# SCHEDULER 
#

# Just go full throttle all the time. Somebody on the forums did measurements and
# it only differed a couple of mW and 1-2 degrees
# However, changing frequency causes latency and initial bufferbloat sometimes
echo performance > /sys/devices/system/cpu/cpufreq/policy0/scaling_governor
echo performance > /sys/devices/system/cpu/cpufreq/policy1/scaling_governor

# NSS 
#

# Also run the NSS core on full speed
echo 800000000 > /proc/sys/dev/nss/clock/current_freq

# This controls if NSS accelerates bridged traffic 
# uncomment if bridge interfaces are acting funny
#sysctl -w net.bridge.bridge-nf-call-ip6tables=0
#sysctl -w net.bridge.bridge-nf-call-iptables=0


# CPUSET
#
# With cpuset you can control which tasks run on which processor 

# this sometimes fails from rc.local, make it a function so we can try again later below
set_cpuset() {
  # enable the functionality
  echo "+cpuset" >/sys/fs/cgroup/cgroup.subtree_control
  # OpenWRT conveniently comes with this group already populated with all "extra"
  # services. Just use that pin it to cpu1, leaving cpu0 free for handling traffic  
  echo 1 >/sys/fs/cgroup/services/cpuset.cpus
}

set_cpuset
if [ ! -f /sys/fs/cgroup/services/cpuset.cpus ]; then 
  echo "/sys/fs/cgroup/services/cpuset.cpus not present, trying again in 10 seconds"
  sleep 10
  set_cpuset
else
  echo "/sys/fs/cgroup/services/cpuset.cpus is present, CPUset enabled" 
fi



# INTERRUPTS
#
# Tuning these makes the difference between 500Mb/s and >750 Mb/s wifi for me

set_irq_affinity() {
  local name="$1" val="$2"
  local num

  # NSS created multiple IRQs with the same name, so loop through all instances
  awk -v name=$name '$7==name{sub(":","");print $1,$7}' /proc/interrupts| while read num irq; do
    echo "Setting IRQ $num for $irq to $val"
    echo $val > /proc/irq/$num/smp_affinity
  done
}


# move the nss_queues (which are related to the ethX interfaces) to the same cpu as
# the (hardcoded) ath10k interfaces. This gives me the best performance and lowest latenc
# maybe has something to do with cpu caches

set_irq_affinity nss_queue1 1

# Moving the NSS coreis to 2 balances the sirq load without a noticable impact on i
# throughput or latency
set_irq_affinity nss 2

# move these to the lighter loaded cpu1, probably doesn't make much of a difference
set_irq_affinity qcom_rpm_ack 2
set_irq_affinity xhci-hcd:usb1 2
set_irq_affinity xhci-hcd:usb3 2

# DISABLE IPV6
#
echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
echo 0 > /proc/sys/net/ipv6/conf/all/forwarding
echo 0 > /proc/sys/net/ipv6/conf/default/forwarding

# 802.11 AQL 
#
# https://forum.openwrt.org/t/aql-and-the-ath10k-is-lovely/59002/302

# I find 1500 the best compromise between throughput and latency 
for ac in 0 1 2 3; do echo $ac 750 1500 > /sys/kernel/debug/ieee80211/phy0/aql_txq_limit; done

# If the total queue length exceeds this many ms, switch to the lower limit above
echo 6000 > /sys/kernel/debug/ieee80211/phy0/aql_threshold

# hard limit on the number of packets in the fq_codel queue 
# default is 8192, this seems a bit excessive 
echo fq_limit 4096 >/sys/kernel/debug/ieee80211/phy0/aqm

# 802.11 CoDeL
#
iw phy0 set codel target 5
iw phy0 set codel interval 50


# TC 
#

# this probably doesn't matter but let's be consistent in interval and queue lengths
tc qdisc add dev eth1 root fq_codel limit 8192 flows 1024 quantum 1514 target 5ms interval 50ms


# ETHERNET TX QUEUE LENGTHS
#
# common wisdom is that this shouldn't make a difference, but as usual
# common wisdom is wrong: testing shows that this shaves off about 3ms
# latency, even with SQM shapers in place.
# eth1 has a big effect, the rest is marginal
echo "Changing transmit queue lengths for ethernet interfaces"

echo 0 >/sys/class/net/eth0/tx_queue_len
echo 0 >/sys/class/net/eth1/tx_queue_len

# ETHERNET OFFLOADS
#
# Disable all offloads sinds they usually cause latency and mess with SQM
# shaves off about 0.5ms on partially loaded wifi too
for IFACE in eth0 eth1 phy0-ap0 phy1-ap0
do
  ethtool -K $IFACE tso off gso off gro off
done


# EXTRA BUFFERS vor NLBWMON
#
# https://forum.openwrt.org/t/ipq806x-nss-build-netgear-r7800-tp-link-c2600-linksys-ea8500/82525/1783
sysctl -w net.core.rmem_max=1573376
sysctl -w net.core.wmem_max=1573376

# RAMOOPS
#
# Make backup copies of the ramoops files, sometimes it's useful to keep a history to compare them
bakramoops() {
  local LOGFILE="$1"
  LOGDIR=/root/log

  if [ -f ${LOGFILE} ]; then

    DATESTAMP=$(date +%Y%m%d-%H%M -r $LOGFILE)
    FILENAME=$(basename $LOGFILE)
    DESTNAME=${LOGDIR}/${FILENAME}.${DATESTAMP}

    if [ ! -f ${DESTNAME} ]; then
      echo "Backing up new ${FILENAME} to ${DESTNAME}"
      cp ${LOGFILE} ${DESTNAME}
    fi

    # keep the last 10 files
    ls -tp ${LOGDIR}/${FILENAME}.* | grep -v '/$' | tail -n +11 | while IFS= read -r f; do rm "$f"; done

  fi

}

bakramoops /sys/fs/pstore/dmesg-ramoops-0
bakramoops /sys/fs/pstore/dmesg-ramoops-1


# LOGGING
#
# dump boot messages before they're out of the bugger, sometimes useful to look back

dumplog() {
  local COMMAND="$1" LOGFILE="$2"
  DATESTAMP=$(date +%Y%m%d-%H%M)
  LOGDIR=/root/log

  mkdir -p ${LOGDIR}

  # Because most routers don't have a real time clock, openwrt does some magic by looking at the
  # last modified file. This means that if the router crashes in short succession, the system comes up with
  # the same time and the logfile gets overwritten. Add a sequence number in this case
  if [ -f ${LOGDIR}/${LOGFILE}.${DATESTAMP} ]; then
    echo "Logfile ${LOGDIR}/${LOGFILE}.${DATESTAMP} already exists"
    for I in 0 1 2 3 4 5 6 7 8 9
    do
      if [ ! -f ${LOGDIR}/${LOGFILE}.${DATESTAMP}.${I} ]; then
        DATESTAMP=${DATESTAMP}.${I}
        break
      fi
    done
  fi

  echo "Dumping output of ${COMMAND} to ${LOGDIR}/${LOGFILE}.${DATESTAMP}"
  ${COMMAND} > ${LOGDIR}/${LOGFILE}.${DATESTAMP}
  rm ${LOGDIR}/${LOGFILE}
  ln -s ${LOGDIR}/${LOGFILE}.${DATESTAMP} ${LOGDIR}/${LOGFILE}

  # keep the 10 latest files
  ls -tp ${LOGDIR}/${LOGFILE}.* | grep -v '/$' | tail -n +11 | while IFS= read -r f; do rm "$f"; done

}

dumplog dmesg dmesg.boot
dumplog logread log.boot


exit 0
