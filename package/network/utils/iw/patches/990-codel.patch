--- a/nl80211.h
+++ b/nl80211.h
@@ -3128,6 +3128,10 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_WIPHY_ANTENNA_GAIN,
 
+	NL80211_ATTR_CODEL_TARGET,
+	NL80211_ATTR_CODEL_INTERVAL,
+	NL80211_ATTR_CODEL_ECN,
+
 	/* add attributes here, update the policy in nl80211.c */
 
 	__NL80211_ATTR_AFTER_LAST,
--- a/phy.c
+++ b/phy.c
@@ -884,3 +884,88 @@ static int handle_antenna_gain(struct nl
 COMMAND(set, antenna_gain, "<antenna gain in dBm>",
 	NL80211_CMD_SET_WIPHY, 0, CIB_PHY, handle_antenna_gain,
 	"Specify antenna gain.");
+
+static int print_codel_handler(struct nl_msg *msg, void *arg)
+{
+	struct nlattr *attrs[NL80211_ATTR_MAX + 1];
+	struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
+
+	nla_parse(attrs, NL80211_ATTR_MAX, genlmsg_attrdata(gnlh, 0),
+		  genlmsg_attrlen(gnlh, 0), NULL);
+
+
+	if (attrs[NL80211_ATTR_CODEL_TARGET])
+		printf("CoDeL target:\t\t%u ms\n",
+			nla_get_u32(attrs[NL80211_ATTR_CODEL_TARGET]));
+	if (attrs[NL80211_ATTR_CODEL_INTERVAL])
+		printf("CoDeL interval:\t\t%u ms\n",
+			nla_get_u32(attrs[NL80211_ATTR_CODEL_INTERVAL]));
+	if (attrs[NL80211_ATTR_CODEL_ECN])
+		printf("CoDeL ECN CE marking:\t\t%u\n",
+			nla_get_u8(attrs[NL80211_ATTR_CODEL_ECN]));
+
+	return NL_SKIP;
+}
+
+
+static int handle_get_codel(struct nl80211_state *state,
+			  struct nl_msg *msg,
+			  int argc, char **argv,
+			  enum id_input id)
+{
+	nla_put_flag(msg, NL80211_ATTR_SPLIT_WIPHY_DUMP);
+	nlmsg_hdr(msg)->nlmsg_flags |= NLM_F_DUMP;
+	register_handler(print_codel_handler, NULL);
+	return 0;
+}
+COMMAND(get, codel, "",
+	NL80211_CMD_GET_WIPHY, 0, CIB_PHY, handle_get_codel,
+	"Get CoDeL parameters.");
+
+static int handle_codel(struct nl80211_state *state,
+			       struct nl_msg *msg,
+			       int argc, char **argv,
+			       enum id_input id)
+{
+	int i;
+
+	if (!argc || (argc != 2 && argc != 4 && argc != 6))
+		return 1;
+
+	for (i = 0; i < argc; i+=2) {
+		char *end;
+		unsigned int tmpul = 0;
+
+		if (strcmp(argv[i], "ecn") == 0) {
+			tmpul = strtoul(argv[i+1], &end, 10);
+			if (*end != '\0')
+				return 1;
+			if (tmpul > 1)
+				return -EINVAL;
+			NLA_PUT_U8(msg, NL80211_ATTR_CODEL_ECN, tmpul);
+		} else if (strcmp(argv[i], "interval") == 0) {
+			tmpul = strtoul(argv[i+1], &end, 10);
+			if (*end != '\0')
+				return 1;
+			if (!tmpul)
+				return -EINVAL;
+			NLA_PUT_U32(msg, NL80211_ATTR_CODEL_INTERVAL, tmpul);
+		} else if (strcmp(argv[i], "target") == 0) {
+			tmpul = strtoul(argv[i+1], &end, 10);
+			if (*end != '\0')
+				return 1;
+			if (!tmpul)
+				return -EINVAL;
+			NLA_PUT_U32(msg, NL80211_ATTR_CODEL_TARGET, tmpul);
+		}
+	}
+
+	return 0;
+ nla_put_failure:
+	return -ENOBUFS;
+
+}
+COMMAND(set, codel, "[ecn <0|1>] [ interval <time in ms> ] [ target <time in ms> ]",
+	NL80211_CMD_SET_WIPHY, 0, CIB_PHY, handle_codel,
+	"Set CoDeL parameters.");
+
